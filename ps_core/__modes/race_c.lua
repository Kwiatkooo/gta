local race_checkpoints = {}race_checkpoints.colshape = nilrace_checkpoints.data = {}race_checkpoints.current = nilrace_checkpoints.max = nilrace_checkpoints.marker = {}race_checkpoints.last_pos = ""race_checkpoints.dimension = 99function setRaceGhostMode()    if not getPlayerTeam(localPlayer) then return end    local team = getTeamName(getPlayerTeam(localPlayer))	if team ~= "Race" then return end	local vehicle = getPedOccupiedVehicle(localPlayer)	setElementAlpha(vehicle,200)	for i,v in pairs(getElementsByType("vehicle")) do		if getElementDimension(v) ~= 0 and v ~= vehicle then			setElementCollidableWith(vehicle,v,false)			setElementCollidableWith(v,vehicle,false)			setElementCollisionsEnabled(v,false)			setElementAlpha(v,200)		end	endendaddEvent("Client:SetGhostMode",true)addEventHandler("Client:SetGhostMode",localPlayer,function()    setRaceGhostMode()	setTimer(setRaceGhostMode,2000,1)end)addCommandHandler("r",function()	local playerTeam = getPlayerTeam(localPlayer)	if not playerTeam then return end    local teamName = getTeamName(playerTeam)	if teamName == "Race" then	    local vehicle = getPedOccupiedVehicle(localPlayer)		if vehicle and getElementAlpha(vehicle) == 200 then		    if race_checkpoints.last_pos ~= "" then			    local pos = split(race_checkpoints.last_pos,",")			    setElementPosition(vehicle,pos[1],pos[2],pos[3]+2)				setElementFrozen(vehicle,true)				setTimer(function()					if isElement(vehicle) then setElementFrozen(vehicle,false) end				end,1000,1)			end		end	endend)bindKey("enter","down","r")addEvent("cMiniGamesRaceData",true)addEventHandler("cMiniGamesRaceData",localPlayer,function(data,dimension)    race_checkpoints.data = data	race_checkpoints.colshape = nil	race_checkpoints.dimension = dimension	race_checkpoints.marker = {}	race_checkpoints.current = 0	race_checkpoints.last_pos = ""	race_checkpoints.max = #race_checkpoints.data	createRaceCheckpoints(race_checkpoints.current)	setPedCanBeKnockedOffBike(localPlayer,false)end)addEventHandler("onClientRender",root,function()    if not getPlayerTeam(localPlayer) then return end    local team = getTeamName(getPlayerTeam(localPlayer))	if team == "Race" then        local vehicle = getPedOccupiedVehicle(localPlayer)		if vehicle then		    local alpha = getElementAlpha(vehicle)			if alpha == 200 then				dxDrawBorderedText(	    			tostring("#00FFFF● race rank: #FFFFFF"..__getLocalPlayerRaceRank().."/"..countPlayersInTeam(getTeamFromName("Race"))),					drawX*0.01,drawY*0.6,drawX*0.01,drawY*0.6,					tocolor(255,255,255,255),					2*drawX/1920,"pricedown",					"left","top",false,false,false,100,0,0,0				)				dxDrawText("ABY WYJSC Z RACE WPISZ /REXIT",drawX*0.5,drawY*0.94,drawX*0.5,drawY*0.94,tocolor(255,0,0,222),0.6*drawX/1366,"bankgothic","center","center",false,false,false,false,false,0,0,0)			end		end	endend)function __getLocalPlayerRaceRank()    local race_rank = 1	local queryCheckpoint = race_checkpoints.current	local checkpoint	for i,v in ipairs(getPlayersInTeam(getTeamFromName("Race"))) do	    if v ~= localPlayer then		    checkpoint = getElementData(v,"race_checkpoint")			if checkpoint > queryCheckpoint then			    race_rank = race_rank+1			elseif checkpoint == queryCheckpoint then			    if distanceFromPlayerToCheckpoint(v) < distanceFromPlayerToCheckpoint(localPlayer) then					race_rank = race_rank+1				end			end		end	end	return race_rankendfunction distanceFromPlayerToCheckpoint(plr)	local cpX,cpY,cpZ = getElementPosition(race_checkpoints.marker[1])	local plrX,plrY,plrZ = getElementPosition(plr)	return getDistanceBetweenPoints3D(plrX,plrY,plrZ,cpX,cpY,cpZ)endfunction createRaceCheckpoints(i)    if isPedDead(localPlayer) then return end    if race_checkpoints.marker[1] then	    local x,y,z = getElementPosition(race_checkpoints.marker[1])		local px,py,pz = getElementPosition(localPlayer)		--[[if pz > z+6 then return end		if pz < z-5 then return end]]		if math.abs(pz-z) > 6 then return end	    race_checkpoints.last_pos = tostring(x..","..y..","..z)	    --removeEventHandler("onClientMarkerHit",race_checkpoints.marker[1],onRaceCheckpointHit)		removeEventHandler("onClientColShapeHit",race_checkpoints.colshape,onRaceCheckpointHit)	    destroyElement(race_checkpoints.marker[1])		race_checkpoints.marker[1] = nil		if race_checkpoints.marker[2] then		    destroyElement(race_checkpoints.marker[2])		    race_checkpoints.marker[2] = nil		end		if race_checkpoints.colshape then			destroyElement(race_checkpoints.colshape)			race_checkpoints.colshape = nil		end	end    local currentCheckpoint = i+1	setElementData(localPlayer,"race_checkpoint",currentCheckpoint)    race_checkpoints.marker[1] = createMarker(race_checkpoints.data[currentCheckpoint][1],race_checkpoints.data[currentCheckpoint][2],race_checkpoints.data[currentCheckpoint][3],"checkpoint",8.0,0,255,255,200)	race_checkpoints.colshape = createColCircle(race_checkpoints.data[currentCheckpoint][1],race_checkpoints.data[currentCheckpoint][2],9)	setElementDimension(race_checkpoints.marker[1],race_checkpoints.dimension)	local blip = createBlipAttachedTo(race_checkpoints.marker[1],0,2,0,255,255,170,0,99999.0)	setElementParent(blip,race_checkpoints.marker[1])	race_checkpoints.current = currentCheckpoint	if currentCheckpoint ~= race_checkpoints.max then	    --addEventHandler("onClientMarkerHit",race_checkpoints.marker[1],onRaceCheckpointHit)		addEventHandler("onClientColShapeHit",race_checkpoints.colshape,onRaceCheckpointHit)	    local nextCheckpoint = currentCheckpoint+1	    race_checkpoints.marker[2] = createMarker(race_checkpoints.data[nextCheckpoint][1],race_checkpoints.data[nextCheckpoint][2],race_checkpoints.data[nextCheckpoint][3],"checkpoint",8.0,255,255,0,200)	    setElementDimension(race_checkpoints.marker[2],race_checkpoints.dimension)		local blip = createBlipAttachedTo(race_checkpoints.marker[2],0,2,255,255,0,120,0,99999.0)		setElementParent(blip,race_checkpoints.marker[1])		setMarkerIcon(race_checkpoints.marker[1],"arrow")		setMarkerTarget(race_checkpoints.marker[1],race_checkpoints.data[nextCheckpoint][1],race_checkpoints.data[nextCheckpoint][2],race_checkpoints.data[nextCheckpoint][3])	else	    --setMarkerSize(race_checkpoints.marker[1],19.0)	    setMarkerIcon(race_checkpoints.marker[1],"finish")		setBlipIcon(blip,53)		--addEventHandler("onClientMarkerHit",race_checkpoints.marker[1],onRaceFinishHit)		addEventHandler("onClientColShapeHit",race_checkpoints.colshape,onRaceFinishHit)	endend--[[function onRaceCheckpointHit(hitPlayer,matchingDimension)    if hitPlayer == localPlayer then	    --createInfoBoxClient(20,"(drawY/5.0)*2","● Punkt kontrolny "..race_checkpoints.current.."/"..race_checkpoints.max,2000)		triggerServerEvent("Server:PlayerCheckpointHit",resourceRoot,race_checkpoints.current,race_checkpoints.max)        createRaceCheckpoints(race_checkpoints.current)	endend]]function onRaceCheckpointHit(element)    local vehicle = getPedOccupiedVehicle(localPlayer)	if vehicle and element == vehicle or not vehicle and element == localPlayer then		triggerServerEvent("Server:PlayerCheckpointHit",resourceRoot,race_checkpoints.current,race_checkpoints.max)        createRaceCheckpoints(race_checkpoints.current)	endend--[[function onRaceFinishHit(hitPlayer,matchingDimension)    if hitPlayer == localPlayer then        if race_checkpoints.marker[1] then	        removeEventHandler("onClientMarkerHit",race_checkpoints.marker[1],onRaceCheckpointHit)	        destroyElement(race_checkpoints.marker[1])		    race_checkpoints.marker[1] = nil	    end	    --createInfoBoxClient(20,"(drawY/5.0)*2","● Ostatni Punkt Kontrolny "..race_checkpoints.current.."/"..race_checkpoints.max,2000)		triggerServerEvent("Server:PlayerCheckpointHit",resourceRoot,race_checkpoints.current,race_checkpoints.max)	    triggerServerEvent("onServerRaceFinish",resourceRoot)	endend]]function onRaceFinishHit(element)    local vehicle = getPedOccupiedVehicle(localPlayer)	if vehicle and element == vehicle or not vehicle and element == localPlayer then        if race_checkpoints.marker[1] then	        removeEventHandler("onClientMarkerHit",race_checkpoints.marker[1],onRaceCheckpointHit)	        destroyElement(race_checkpoints.marker[1])		    race_checkpoints.marker[1] = nil	    end		if race_checkpoints.colshape then			destroyElement(race_checkpoints.colshape)			race_checkpoints.colshape = nil		end		triggerServerEvent("Server:PlayerCheckpointHit",resourceRoot,race_checkpoints.current,race_checkpoints.max)	    triggerServerEvent("onServerRaceFinish",resourceRoot)	endendaddEvent("onServerRaceEnd",true)addEventHandler("onServerRaceEnd",localPlayer,function()    if race_checkpoints.marker[1] then	    removeEventHandler("onClientMarkerHit",race_checkpoints.marker[1],onRaceCheckpointHit)	    destroyElement(race_checkpoints.marker[1])		race_checkpoints.marker[1] = nil		if race_checkpoints.marker[2] then		    destroyElement(race_checkpoints.marker[2])		    race_checkpoints.marker[2] = nil		end		if race_checkpoints.colshape then			destroyElement(race_checkpoints.colshape)			race_checkpoints.colshape = nil		end	endend)addEventHandler("onClientPlayerWasted",localPlayer,function()    if race_checkpoints.marker[1] then	    removeEventHandler("onClientMarkerHit",race_checkpoints.marker[1],onRaceCheckpointHit)	    destroyElement(race_checkpoints.marker[1])		race_checkpoints.marker[1] = nil		if race_checkpoints.marker[2] then		    destroyElement(race_checkpoints.marker[2])		    race_checkpoints.marker[2] = nil		end	endend)